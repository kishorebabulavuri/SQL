SQL UPDATE Statement: Modifying Existing Records
The UPDATE statement is used to modify existing records in a table. It allows updating one or multiple columns based on a specified condition.

1Ô∏è‚É£ Basic UPDATE Syntax

UPDATE table_name 
SET column1 = value1, column2 = value2 
WHERE condition;
üîπ Example: Update Alice's salary to 60000.

UPDATE employees 
SET salary = 60000 
WHERE name = 'Alice';
‚úÖ Always use WHERE to avoid updating all rows.

2Ô∏è‚É£ Updating Multiple Columns

UPDATE employees 
SET salary = 70000, department = 'IT' 
WHERE id = 102;
üîπ Updates both salary and department for employee with ID 102.

3Ô∏è‚É£ Updating All Rows (UPDATE Without WHERE)

UPDATE employees 
SET department = 'General';
üîπ Changes every employee‚Äôs department to 'General' (‚ö†Ô∏è Use carefully).

4Ô∏è‚É£ Using UPDATE with CASE (Conditional Updates)

----> reference (CASE)

UPDATE employees 
SET salary = 
    CASE 
        WHEN department = 'HR' THEN 50000
        WHEN department = 'IT' THEN 80000
        ELSE salary 
    END;
üîπ Updates HR employees to 50000 and IT employees to 80000.

5Ô∏è‚É£ Updating Using a Subquery

UPDATE employees 
SET salary = (SELECT AVG(salary) FROM employees)
WHERE department = 'Finance';
üîπ Sets Finance employees' salary to the average salary of all employees.

6Ô∏è‚É£ Updating Data Using JOIN

UPDATE employees 
INNER JOIN departments ON employees.department_id = departments.id
SET employees.salary = 75000
WHERE departments.department_name = 'Sales';
üîπ Increases salaries for all Sales employees.

‚ö†Ô∏è Important Notes:
Always use WHERE unless you intend to update all records.
UPDATE can be rolled back if inside a transaction.
UPDATE does not reset auto-increment values.