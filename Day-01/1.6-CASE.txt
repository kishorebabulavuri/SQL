SQL CASE Statement: Conditional Logic in Queries
The CASE statement is used to apply conditional logic within SQL queries. It works like an IF-ELSE statement in programming, allowing you to return different values based on conditions.

1Ô∏è‚É£ Basic CASE Syntax

CASE 
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    ELSE default_result
END
üîπ Used inside SELECT, UPDATE, ORDER BY, and more.

2Ô∏è‚É£ Using CASE in SELECT

SELECT name, age, 
       CASE 
           WHEN age < 25 THEN 'Young'
           WHEN age BETWEEN 25 AND 40 THEN 'Mid-Age'
           ELSE 'Senior'
       END AS age_category
FROM employees;
üîπ Categorizes employees as Young, Mid-Age, or Senior.

3Ô∏è‚É£ Using CASE in UPDATE

UPDATE employees 
SET salary = 
    CASE 
        WHEN department = 'HR' THEN 50000
        WHEN department = 'IT' THEN 80000
        ELSE salary 
    END;
üîπ Updates HR salaries to 50,000 and IT salaries to 80,000.

4Ô∏è‚É£ Using CASE in ORDER BY

SELECT * FROM employees
ORDER BY 
    CASE 
        WHEN department = 'IT' THEN 1
        WHEN department = 'HR' THEN 2
        ELSE 3
    END;
üîπ Sorts IT first, then HR, then others.

5Ô∏è‚É£ Using CASE with Aggregations

SELECT department, 
       SUM(CASE WHEN age < 30 THEN salary ELSE 0 END) AS young_employee_salary
FROM employees
GROUP BY department;
üîπ Calculates total salary of employees under 30 for each department.

üîπ Key Points
‚úî CASE can be used in SELECT, UPDATE, ORDER BY, and GROUP BY.
‚úî ELSE is optional (if omitted, NULL is returned when no conditions match).
‚úî Works like IF-ELSE logic.